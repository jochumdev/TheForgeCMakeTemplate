/*
 * Copyright (c) 2017-2022 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shaderDefs.h.fsl"

#if defined(DIRECT3D12)
#define INDIRECT_ROOT_CONSTANT 1
#endif

#if defined(INDIRECT_ROOT_CONSTANT)
#define INDIRECT_ARG_ELEMENT_COUNT 6
#define DRAW_ARG_OFFSET   1
#else
#define INDIRECT_ARG_ELEMENT_COUNT 5
#define DRAW_ARG_OFFSET   0
#endif

#define MAX_LOD_OFFSETS (10)
CBUFFER(uniformBlock, UPDATE_FREQ_PER_FRAME, b1, binding = 1 )
{
    DATA(float4x4, viewProj, None);
    DATA(float4, camPos, None);
    DATA(float, dt, None);
    DATA(uint, startIdx, None);
    DATA(uint, endIdx, None);
    DATA(int, numLODs, None);
    DATA(int, indexOffsets[MAX_LOD_OFFSETS], None);
};

RES( Buffer(AsteroidStatic), asteroidsStatic, UPDATE_FREQ_NONE, t2, binding = 2);
RES( RWBuffer(AsteroidDynamic), asteroidsDynamic, UPDATE_FREQ_NONE, u4, binding = 4);
RES( RWBuffer(uint), drawCmds, UPDATE_FREQ_NONE, u3, binding = 3);

//taken from our math library
float4x4 MakeRotationMatrix(float angle, float3 axis)
{
    float s, c;
    s = sin(angle);
    c = cos(angle);
    float x,y,z;
    x = axis.x;
    y = axis.y;
    z = axis.z;
    float xy, yz, zx;
    xy = axis.x * axis.y;
    yz = axis.y * axis.z;
    zx = axis.z * axis.x;
    float oneMinusC = 1.0 - c;

    return make_f4x4_col_elems(
        x * x * oneMinusC + c , xy * oneMinusC + z * s, zx * oneMinusC - y * s, 0.0,
        xy * oneMinusC - z * s, y * y * oneMinusC + c , yz * oneMinusC + x * s, 0.0,
        zx * oneMinusC + y * s, yz * oneMinusC - x * s, z * z * oneMinusC + c , 0.0,
        0.0,                    0.0,                    0.0,                    1.0);
}

#define minSubdivSizeLog2 log2(0.0019)

NUM_THREADS(128, 1, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadID) 
{
	INIT_MAIN;
    uint asteroidIdx = threadID.x + uint(Get(startIdx));

    if (asteroidIdx >= Get(endIdx))
        return;

    AsteroidStatic asteroidStatic = Get(asteroidsStatic)[asteroidIdx];
    AsteroidDynamic asteroidDynamic = Get(asteroidsDynamic)[asteroidIdx];

    float4x4 orbit = MakeRotationMatrix(asteroidStatic.orbitSpeed * Get(dt), float3(0.0,1.0,0.0));
    float4x4 rotate = MakeRotationMatrix(asteroidStatic.rotationSpeed * Get(dt), asteroidStatic.rotationAxis.xyz);

    asteroidDynamic.transform = mul(mul(orbit, asteroidDynamic.transform), rotate);

    float3 position = getCol3(asteroidDynamic.transform).xyz;
    
    float distToEye = length(position - Get(camPos).xyz);

    if (distToEye <= 0)
        return;

    float relativeScreenSizeLog2 = log2(asteroidStatic.scale / distToEye);
    float LODfloat = max(0.0, relativeScreenSizeLog2 - minSubdivSizeLog2);
    uint LOD = min(Get(numLODs) - 1, int(LODfloat));

    //setting start offset and index count
    uint _startIdx = Get(indexOffsets)[LOD];
    uint _endIdx = Get(indexOffsets)[LOD + 1];
#ifdef INDIRECT_ROOT_CONSTANT
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT] = asteroidIdx;
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT + DRAW_ARG_OFFSET + 4] = 0;
#else
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT + DRAW_ARG_OFFSET + 4] = asteroidIdx;
#endif
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT + DRAW_ARG_OFFSET + 2] = _startIdx;
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT + DRAW_ARG_OFFSET + 0] = _endIdx - _startIdx;
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT + DRAW_ARG_OFFSET + 3] = asteroidStatic.vertexStart;
    Get(drawCmds)[threadID.x * INDIRECT_ARG_ELEMENT_COUNT + DRAW_ARG_OFFSET + 1] = 1;

    Get(asteroidsDynamic)[asteroidIdx] = asteroidDynamic;
	RETURN();
}
